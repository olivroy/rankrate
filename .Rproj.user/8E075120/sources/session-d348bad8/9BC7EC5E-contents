#' Estimate phat in a Mallows-Binomial given an order constraint
#'
#' This function calculates the MLE of p in a Mallows-Binomial(p,theta) distribution given Order(p).
#'
#' @param ratings Matrix of ratings, one row per judge and one column per object.
#' @param M Numeric specifying maximum (=worst quality) integer rating.
#' @param order Vector specifying a top-r or complete ordering of the desired p vector.
#'
#' @return Vector of length J that is the MLE of p given Order(p) and ratings.
#'
#' @examples
#' ratings <- matrix(c(0,1,2,3,1,2,2,5),byrow=TRUE,nrow=2)
#' phat_conditional(ratings=ratings,M=5,order=c(1,2,3,4))
#' phat_conditional(ratings=ratings,M=5,order=c(2,1))
#'
#' @export
phat_conditional <- function(ratings,M,order){

  ## Find elements not in order, and calculate constants (ordered by order)
  J <- ncol(ratings)
  rest <- setdiff(1:J,order)
  order_rest <- c(order,rest)
  c1 <- apply(ratings[,order_rest],2,function(x){sum(x,na.rm=T)})
  c2 <- apply(M-ratings[,order_rest],2,function(x){sum(x,na.rm=T)})

  ## Create Linear Constraints

  # basic constaints to be in unit interval
  ui <- rbind(diag(J),-diag(J))
  ci <- c(rep(0,J),rep(-1,J))

  # constraints ensuring order among items in order
  if(length(order)>1){
    for(index in 1:(length(order)-1)){
      ui <- rbind(ui,c(rep(0,index-1),c(-1,1),rep(0,J-2-index+1)))
      ci <- c(ci,0)
    }
  }

  # constraints ensuring remaining objects are greater than order, but no order among them
  if(length(rest)>0){
    for(index in (J-length(rest)+1):J){
      ui_vals <- rep(0,J)
      ui_vals[index] <- 1
      ui_vals[length(order)] <- -1
      ui <- rbind(ui,ui_vals)
      ci <- c(ci,0)
    }
  }

  ## Perform constrained optimization
  opt <- constrOptim(theta = seq(1/(J+1),J/(J+1),length=J),
                     f= function(theta){-sum(c1*log(theta)+c2*log(1-theta))},
                     grad = function(theta){-c1/theta+c2/(1-theta)},
                     outer.iterations = 1000,
                     ui=ui,ci=ci)

  ## Ensure feasible solution
  solution <- opt$par[order(order_rest)]

  if(!all(ui %*% opt$par - ci >=0) | !all(diff(solution[order])>=0) |
     !all(solution[rest]-solution[order[length(order)]]>=0)){
    stop("Bad solution found!!")
  }

  ## Return conditional MLE
  return(solution)
}
